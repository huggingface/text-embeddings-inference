{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create a stack that runs HF Text Embeddings Inference Server on a single instance",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "ConstraintDescription": "If present, must be the name of an existing EC2 KeyPair.",
      "Default": ""
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t3.small"
    },
    "Model": {
      "Description": "Model to use",
      "Type": "String",
      "Default": "multi-qa-mpnet-base-dot-v1"
    },
    "Gpu": {
      "Description": "Set to true if using a GPU EC2 instance",
      "Type": "Boolean",
      "Default": false
    }
  },
  "Conditions": {
    "HasKeyName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "KeyName"
            },
            ""
          ]
        }
      ]
    }
  },
  "Resources": {
    "EmbedInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "Region2AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "Content-Type: multipart/mixed; boundary=\"//\"\n",
                "MIME-Version: 1.0\n",
                "\n",
                "--//\n",
                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                "\n",
                "\n",
                "#cloud-config\n",
                "cloud_final_modules:\n",
                "- [scripts-user, always]\n",
                "\n",
                "\n",
                "--//\n",
                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                "MIME-Version: 1.0\n",
                "Content-Transfer-Encoding: 7bit\n",
                "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
                "\n",
                "\n",
                "#!/bin/bash\n",
                "amazon-linux-extras install docker\n",
                "usermod -a -G docker ec2-user\n",
                "curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n",
                "chmod +x /usr/local/bin/docker-compose\n",
                "ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n",
                "\n",
                "model=${Model}\n",
                "volume=$PWD/data\n",
                "if ${Gpu}; then gpus=all; fi\n",
                "\n",
                "systemctl enable docker\n",
                "systemctl start docker\n",
                "\n",
                "cat << EOF > /home/ec2-user/docker-compose.yml\n",
                "version: '3.9'\n",
                "\n",
                "networks:\n",
                "  net:\n",
                "    driver: bridge\n",
                "\n",
                "services:\n",
                "  server:\n",
                {
                  "Fn::Sub": "    image: ghcr.io/huggingface/text-embeddings-inference:cpu-0.3.0\n"
                },
                "    volumes:\n",
                "      - data:/data\n",
                "    ports:\n",
                "      - 80:80\n",
                "    networks:\n",
                "      - net\n",
                "\n",
                "volumes:\n",
                "  data:\n",
                "    driver: local\n",
                "\n",
                "EOF\n",
                "\n",
                "mkdir /home/ec2-user/config\n",
                "\n",
                "docker-compose -f /home/ec2-user/docker-compose.yml up -d\n",
                "\n",
                "--//--\n"
              ]
            ]
          }
        },
        "SecurityGroupIds": [
          {
            "Ref": "EmbedInstanceSecurityGroup"
          }
        ],
        "KeyName": {
          "Fn::If": [
            "HasKeyName",
            {
              "Ref": "KeyName"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "Region2AMI",
                {
                  "Ref": "AWS::Region"
                },
                "RootDeviceName"
              ]
            },
            "Ebs": {
              "VolumeSize": 24
            }
          }
        ]
      }
    },
    "EmbedInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Embed Instance Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerIp": {
      "Description": "IP address of the Embed server",
      "Value": {
        "Fn::GetAtt": ["EmbedInstance", "PublicIp"]
      }
    }
  },
  "Mappings": {
    "Region2AMI": {
      "ap-south-1": {
        "AMI": "ami-0d81306eddc614a45",
        "RootDeviceName": "/dev/xvda"
      },
      "eu-north-1": {
        "AMI": "ami-0b4ab8a966e0c2b21",
        "RootDeviceName": "/dev/xvda"
      },
      "eu-west-3": {
        "AMI": "ami-0b915513496b814ce",
        "RootDeviceName": "/dev/xvda"
      },
      "eu-west-2": {
        "AMI": "ami-05c7c53494ee72c3b",
        "RootDeviceName": "/dev/xvda"
      },
      "eu-west-1": {
        "AMI": "ami-0e23c576dacf2e3df",
        "RootDeviceName": "/dev/xvda"
      },
      "ap-northeast-3": {
        "AMI": "ami-0bb1804bd27551099",
        "RootDeviceName": "/dev/xvda"
      },
      "ap-northeast-2": {
        "AMI": "ami-03a633fd8200146fb",
        "RootDeviceName": "/dev/xvda"
      },
      "ap-northeast-1": {
        "AMI": "ami-0a3511e934660ef01",
        "RootDeviceName": "/dev/xvda"
      },
      "ca-central-1": {
        "AMI": "ami-04c83db95505f127f",
        "RootDeviceName": "/dev/xvda"
      },
      "sa-east-1": {
        "AMI": "ami-0792f512117871b0b",
        "RootDeviceName": "/dev/xvda"
      },
      "ap-southeast-1": {
        "AMI": "ami-08db74f389216e7e0",
        "RootDeviceName": "/dev/xvda"
      },
      "ap-southeast-2": {
        "AMI": "ami-02f0d7bd6acb31e1f",
        "RootDeviceName": "/dev/xvda"
      },
      "eu-central-1": {
        "AMI": "ami-0aea56f3589631913",
        "RootDeviceName": "/dev/xvda"
      },
      "us-east-1": {
        "AMI": "ami-090e0fc566929d98b",
        "RootDeviceName": "/dev/xvda"
      },
      "us-east-2": {
        "AMI": "ami-012a02c31b6079415",
        "RootDeviceName": "/dev/xvda"
      },
      "us-west-1": {
        "AMI": "ami-061ea90489f8844ca",
        "RootDeviceName": "/dev/xvda"
      },
      "us-west-2": {
        "AMI": "ami-0cef94f067b35ada0",
        "RootDeviceName": "/dev/xvda"
      }
    }
  }
}
